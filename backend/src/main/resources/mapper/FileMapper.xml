<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.sync_everything.dao.FileDao">
    <resultMap id="FileMap" type="com.example.sync_everything.entity.file.SegmentFile">
        <result column="id" property="id" />
        <result column="user_id" property="userId" />
        <result column="key" property="key" />
        <result column="file_name" property="fileName" />
        <result column="file_path" property="filePath" />
        <result column="segment_index" property="segmentIndex" />
        <result column="segment_total" property="segmentTotal" />
        <result column="size" property="size" />
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="UsersFileMap" type="com.example.sync_everything.entity.file.UsersFile">
        <result column="user_id" property="userId" />
        <result column="count(*)" property="count" />
    </resultMap>
    <select id="queryByKey" parameterType="java.lang.String" resultMap="FileMap">
        select id, `key`, file_name, file_path, segment_index, segment_total, `size`, created_at, updated_at, user_id from sync.files where `key` = #{key}
    </select>
    <insert id="createSegmentFile" parameterType="com.example.sync_everything.entity.file.SegmentFile">
        insert into files (`key`, size, file_name, file_path, segment_index, segment_total, user_id)
        values (#{key}, #{size}, #{fileName}, #{filePath}, #{segmentIndex}, #{segmentTotal}, #{userId})
    </insert>
    <select id="exists" resultType="java.lang.Boolean">
        select exists(
            select id from files
            where `key` = #{key}
                   )
    </select>
    <update id="updateSegmentFile" parameterType="com.example.sync_everything.entity.file.SegmentFile">
        update files
        set segment_index = #{segmentIndex}
        where id = #{id}
    </update>
    <delete id="deleteSegmentFile" parameterType="java.lang.String" >
        delete from files where `key` = #{key}
    </delete>
    <select id="countUsersFile" resultMap="UsersFileMap">
        select user_id, COUNT(*) from files group by user_id
    </select>
</mapper>